scalar DateTime

type Query {
    currentUser(userId: String): User!
    users: [User!]!
    sprints: [Sprint!]!
    sprint(id: String): Sprint!
    tasks: [Task!]!
    task(id: String!): Task!
    issues: [Issue!]!
    issue(id: String!): Issue!
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    imgUrl: String
    jobTitle: String
    department: String!
    organization: String
    location: String
    aTasks: [Task!]!
    rTasks: [Task!]!
    comments: [Comment!]!
    aIssues: [Issue!]!
    rIssues: [Issue!]!
    vIssues: [Issue!]!
    qaIssues: [Issue!]!
}

type Sprint {
    id: ID!
    title: String!
    description: String
    status: [String!]!
    startDate: DateTime!
    endDate: DateTime!
    tasks: [Task!]!
    issues: [Issue!]!
}

type Task {
    id: ID!
    title: String!
    description: String
    status: String!
    attachment: String
    assigneeId: User
    reporterId: User
    priority: String!
    sprintId: Sprint!
    comments: [Comment!]!
    issues: [Issue!]!
}

type Issue {
    id: ID!
    issueType: String!
    status: String!
    attachment: String
    summary: String!
    description: String
    label: String!
    priority: String!
    taskId: Task!
    assigneeId: User
    reporterId: User
    viewerId: User
    qaId: User
    sprintId: Sprint!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    userId: User!
    taskId: Task
    issueId: Issue
}

type AuthPayload {
    token: String!
    user: User!
}

type PasswordPayload {
    message: String!
}

type DeleteUserPayload {
    field: String
    value: String
}

type DescPayload {
    description: String
}

type TitlePayload {
    title: String
    id: String
}

type StatusPayload {
    status: String
    taskId: String
}

input RegisterUserInput {
    name: String!
    email: String!
    password: String!
    imgUrl: String
    jobTitle: String
    department: String
    organization: String
    location: String
}

input LoginUserInput {
    email: String!
    password: String!
}

input ForgotPasswordInput {
    email: String!
}

input ResetPasswordInput {
    newPassword: String!
    confirmPassword: String!
}

input UpdateUserInput {
    jobTitle: String
    department: String
    organization: String
    location: String
}

input DeleteUserInput {
    field: String!
    value: String!
}

input CreateSprintInput {
    title: String!
    description: String
    status: [String!]!
    startDate: DateTime!
    endDate: DateTime!
}

input CreateTaskInput {
    title: String!
    description: String
    status: String!
    priority: String!
    attachment: String
    assigneeId: ID
    sprintId: ID!
    reporterId: ID
}


input UpdateDescriptionInput {
    description: String
}

input CreateCommentInput {
    text: String!
    userId: ID!
    taskId: ID
    issueId: ID
}

input UpdateCommentInput {
    text: String
}

input UpdateTaskStatusInput {
    status: String!
}

input CreateIssueInput {
    issueType: String!
    status: String!
    attachment: String
    summary: String!
    description: String
    label: String!
    priority: String!
    taskId: ID!
    assigneeId: ID
    reporterId: ID
    viewerId: ID
    qaId: ID
    sprintId: ID!
}

input TitleInput {
    title: String
    id: String
}

input UpdateStatusInput {
    taskId: String,
    status: String
}

type Mutation {
    registerUser(data: RegisterUserInput): AuthPayload!
    loginUser(data: LoginUserInput): AuthPayload!
    forgotPassword(data: ForgotPasswordInput!): PasswordPayload!
    resetPassword(email: String!, data: ResetPasswordInput!): PasswordPayload!
    updateUser(id: String!, data: UpdateUserInput!): User!
    deleteUser(id: String!, data: DeleteUserInput!): DeleteUserPayload!
    createSprint(data: CreateSprintInput!): Sprint!
    createTask(data: CreateTaskInput!): Task!
    updateDescription(id: String!, data: UpdateDescriptionInput!): DescPayload!
    createComment(data: CreateCommentInput!): Comment!
    updateComment(id: String!, data: UpdateCommentInput!): Comment!
    deleteComment(id: String!): Comment!
    updateTaskStatus(id: String!, data: UpdateTaskStatusInput!): Task!
    createIssue(data: CreateIssueInput!): Issue!
    updateIssueDesc(id: String!, data: UpdateDescriptionInput!): DescPayload!
    updateTitle(data: TitleInput!): TitlePayload!
    updateStatus(data: UpdateStatusInput!): StatusPayload!
    updateSprintTitle(data: TitleInput!): TitlePayload!
}